import topology.compact_open
import topology.uniform_space.basic
import topology.order

universes u‚ÇÅ u‚ÇÇ

open_locale filter uniformity topological_space
open uniform_space set

variables {Œ± : Type u‚ÇÅ} {Œ≤ : Type u‚ÇÇ} [topological_space Œ±] [uniform_space Œ≤]
variables (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (f : C(Œ±, Œ≤))

/-- A neighbourhood system for the topology of compact convergence. -/
def uniform_gen : set C(Œ±, Œ≤) := {g | ‚àÄ (x ‚àà K), (f x, g x) ‚àà V }

/-- A filter basis for the neighbourhood filter of a point in the topology of compact
convergence. -/
def compact_convergence_filter_basis (f : C(Œ±, Œ≤)) : filter_basis C(Œ±, Œ≤) :=
{ sets       := { m | ‚àÉ (K : set Œ±) (hK : is_compact K) (V ‚àà ùì§ Œ≤), m = uniform_gen K V f },
  nonempty   := ‚ü®univ, ‚àÖ, is_compact_empty, univ, filter.univ_mem, by { ext, simp [uniform_gen], }‚ü©,
  inter_sets :=
    begin
      rintros - - ‚ü®K‚ÇÅ, hK‚ÇÅ, V‚ÇÅ, hV‚ÇÅ, rfl‚ü© ‚ü®K‚ÇÇ, hK‚ÇÇ, V‚ÇÇ, hV‚ÇÇ, rfl‚ü©,
      exact ‚ü®uniform_gen (K‚ÇÅ ‚à™ K‚ÇÇ) (V‚ÇÅ ‚à© V‚ÇÇ) f,
        ‚ü®K‚ÇÅ ‚à™ K‚ÇÇ, hK‚ÇÅ.union hK‚ÇÇ, V‚ÇÅ ‚à© V‚ÇÇ, filter.inter_mem hV‚ÇÅ hV‚ÇÇ, rfl‚ü©,
        Œª g hg, ‚ü®Œª x hx, mem_of_mem_inter_left (hg x (mem_union_left K‚ÇÇ hx)),
                 Œª x hx, mem_of_mem_inter_right (hg x (mem_union_right K‚ÇÅ hx))‚ü©‚ü©,
    end, }

/-- The topology of compact convergence. I claim this topology is induced by a uniform structure,
defined below. -/
def compact_convergence_topology : topological_space C(Œ±, Œ≤) :=
topological_space.mk_of_nhds $ Œª f, (compact_convergence_filter_basis f).filter

lemma mem_compact_convergence_filter (X : set C(Œ±, Œ≤)) :
  X ‚àà (compact_convergence_filter_basis f).filter ‚Üî
  ‚àÉ (K : set Œ±) (V : set (Œ≤ √ó Œ≤)) (hK : is_compact K) (hv : V ‚àà ùì§ Œ≤), uniform_gen K V f ‚äÜ X :=
begin
  split,
  { rintros ‚ü®s, ‚ü®K, hK, V, hV, rfl‚ü©, hX‚ü©,
    exact ‚ü®K, V, hK, hV, hX‚ü©, },
  { rintros ‚ü®K, V, hK, hV, hX‚ü©,
    exact ‚ü®uniform_gen K V f, ‚ü®K, hK, V, hV, rfl‚ü©, hX‚ü©, },
end

lemma mem_uniform_gen_self (hV : V ‚àà ùì§ Œ≤) : f ‚àà uniform_gen K V f :=
Œª x hx, refl_mem_uniformity hV

lemma uniform_gen_mono (V' : set (Œ≤ √ó Œ≤)) (hV' : V' ‚äÜ V) :
  uniform_gen K V' f ‚äÜ uniform_gen K V f :=
Œª x hx a ha, hV' (hx a ha)

lemma uniform_gen_comp {g‚ÇÅ g‚ÇÇ : C(Œ±, Œ≤)} (V' : set (Œ≤ √ó Œ≤))
  (h‚ÇÅ : g‚ÇÅ ‚àà uniform_gen K V f) (h‚ÇÇ : g‚ÇÇ ‚àà uniform_gen K V' g‚ÇÅ) :
  g‚ÇÇ ‚àà uniform_gen K (V ‚óã V') f :=
Œª x hx, ‚ü®g‚ÇÅ x, h‚ÇÅ x hx, h‚ÇÇ x hx‚ü©

lemma uniform_gen_nhd_basis (hV : V ‚àà ùì§ Œ≤) :
  ‚àÉ (V' ‚àà ùì§ Œ≤), V' ‚äÜ V ‚àß ‚àÄ (g ‚àà uniform_gen K V' f), uniform_gen K V' g ‚äÜ uniform_gen K V f :=
begin
  obtain ‚ü®V', hV'‚ÇÅ, hV'‚ÇÇ‚ü© := comp_mem_uniformity_sets hV,
  refine ‚ü®V', hV'‚ÇÅ, subset.trans (subset_comp_self_of_mem_uniformity hV'‚ÇÅ) hV'‚ÇÇ, Œª g hg g' hg', _‚ü©,
  exact uniform_gen_mono K V f (V' ‚óã V') hV'‚ÇÇ (uniform_gen_comp K V' f V' hg hg'),
end

/-- Any point of `compact_open.gen K U` is also an interior point wrt the topology of compact
convergence.

The topology of compact convergence is thus at least as fine as the compact-open topology. -/
lemma uniform_gen_subset_compact_open (hK : is_compact K) {U : set Œ≤} (hU : is_open U)
  (hf : f ‚àà continuous_map.compact_open.gen K U) :
  ‚àÉ (V ‚àà ùì§ Œ≤), is_open V ‚àß uniform_gen K V f ‚äÜ continuous_map.compact_open.gen K U :=
begin
  obtain ‚ü®V, hV‚ÇÅ, hV‚ÇÇ, hV‚ÇÉ‚ü© := lebesgue_number_of_compact_open (hK.image f.continuous) hU hf,
  refine ‚ü®V, hV‚ÇÅ, hV‚ÇÇ, _‚ü©,
  rintros g hg - ‚ü®x, hx, rfl‚ü©,
  exact hV‚ÇÉ (f x) ‚ü®x, hx, rfl‚ü© (hg x hx),
end

/-- The point `f` in `uniform_gen K V f` is also an interior point wrt the compact-open topology.

From this it should follow that the compact-open topology is at least as fine as the topology of
compact convergence. -/
lemma Inter_compact_open_gen_subset_uniform_gen (hK : is_compact K) (hV : V ‚àà ùì§ Œ≤) :
  ‚àÉ (Œπ : Sort (u‚ÇÅ + 1)) [fintype Œπ]
  (C : Œπ ‚Üí set Œ±) (hC : ‚àÄ i, is_compact (C i))
  (U : Œπ ‚Üí set Œ≤) (hU : ‚àÄ i, is_open (U i)),
  (f ‚àà ‚ãÇ i, continuous_map.compact_open.gen (C i) (U i)) ‚àß
  (‚ãÇ i, continuous_map.compact_open.gen (C i) (U i)) ‚äÜ uniform_gen K V f :=
begin
  obtain ‚ü®W, hW‚ÇÅ, hW‚ÇÑ, hW‚ÇÇ, hW‚ÇÉ‚ü© := comp_open_symm_mem_uniformity_sets hV,
  obtain ‚ü®Z, hZ‚ÇÅ, hZ‚ÇÑ, hZ‚ÇÇ, hZ‚ÇÉ‚ü© := comp_open_symm_mem_uniformity_sets hW‚ÇÅ,
  let U : Œ± ‚Üí set Œ± := Œª x, f‚Åª¬π' (ball (f x) Z),
  have hU : ‚àÄ x, is_open (U x) := Œª x, f.continuous.is_open_preimage _ (is_open_ball _ hZ‚ÇÑ),
  have hUK : K ‚äÜ ‚ãÉ (x : K), U (x : K),
  { intros x hx,
    simp only [exists_prop, mem_Union, Union_coe_set, mem_preimage],
    use (‚ü®x, hx‚ü© : K),
    simp [hx, mem_ball_self (f x) hZ‚ÇÅ], },
  obtain ‚ü®t, ht‚ü© := hK.elim_finite_subcover _ (Œª (x : K), hU x.val) hUK,
  let C : t ‚Üí set Œ± := Œª i, K ‚à© closure (U ((i : K) : Œ±)),
  have hC : K ‚äÜ ‚ãÉ i, C i,
  { rw [‚Üê K.inter_Union, subset_inter_iff],
    refine ‚ü®rfl.subset, ht.trans _‚ü©,
    simp only [set_coe.forall, subtype.coe_mk, Union_subset_iff],
    intros x hx‚ÇÅ hx‚ÇÇ,
    apply subset_subset_Union (‚ü®_, hx‚ÇÇ‚ü© : t),
    simp [subset_closure], },
  have hfC : ‚àÄ (i : t), f '' C i ‚äÜ ball (f ((i : K) : Œ±)) W,
  { rintros ‚ü®‚ü®x, hx‚ÇÅ‚ü©, hx‚ÇÇ‚ü©,
    calc f '' (K ‚à© closure (U x))
          ‚äÜ f '' (closure (U x)) : by { mono, simp only [inter_subset_right], }
      ... ‚äÜ closure (f '' (U x)) : continuous_on.image_closure f.continuous.continuous_on
      ... ‚äÜ closure (ball (f x) Z) : by { mono, simp, }
      ... ‚äÜ ball (f x) W : by { intros y hy,
                                obtain ‚ü®z, hz‚ÇÅ,hz‚ÇÇ‚ü© := uniform_space.mem_closure_iff_ball.mp hy hZ‚ÇÅ,
                                rw mem_ball_symmetry hZ‚ÇÇ at hz‚ÇÅ,
                                exact ball_mono hZ‚ÇÉ _ (mem_ball_comp hz‚ÇÇ hz‚ÇÅ), }, },
  refine ‚ü®t,
          t.fintype_coe_sort,
          C,
          Œª i, hK.inter_right is_closed_closure,
          Œª i, ball (f ((i : K) : Œ±)) W,
          Œª i, is_open_ball _ hW‚ÇÑ,
          by simp [continuous_map.compact_open.gen, hfC, -image_subset_iff],
          _‚ü©,
  intros g hg x hx,
  apply hW‚ÇÉ,
  replace hx := mem_Union.mp (hC hx),
  obtain ‚ü®y, hy‚ü© := hx,
  rw mem_comp_rel,
  use f y,
  simp only [mem_Inter, continuous_map.compact_open.gen, mem_set_of_eq, image_subset_iff] at hg,
  refine ‚ü®_, mem_preimage.mp (hg y hy)‚ü©,
  simp only [image_subset_iff, mem_preimage] at hfC,
  specialize hfC y hy,
  rw [ball_eq_of_symmetry hW‚ÇÇ] at hfC,
  exact hfC,
end

/-- This should follow from the various lemmas above. -/
lemma compact_open_eq_uniform :
  (compact_convergence_topology : topological_space C(Œ±, Œ≤)) = continuous_map.compact_open :=
begin
  rw [compact_convergence_topology, continuous_map.compact_open],
  refine le_antisymm _ _,
  { rw le_generate_from_iff_subset_is_open,
    simp only [and_imp, exists_prop, forall_exists_index, set_of_subset_set_of],
    rintros - K hK U hU rfl,
    intros f hf,
    obtain ‚ü®V, hV, hV', hVf‚ü© := uniform_gen_subset_compact_open K f hK hU hf,
    exact filter.mem_of_superset (filter_basis.mem_filter_of_mem _ ‚ü®K, hK, V, hV, rfl‚ü©) hVf, },
  { intros X hX,
    apply is_open_iff_forall_mem_open.2,
    intros f hf,
    have hXf : X ‚àà @nhds C(Œ±, Œ≤) compact_convergence_topology f,
    { exact @is_open.mem_nhds C(Œ±, Œ≤) compact_convergence_topology _ _ hX hf, },
    rw topological_space.nhds_mk_of_nhds at hXf,
    { obtain ‚ü®-, ‚ü®K, hK, V, hV, rfl‚ü©, hXf‚ü© := hXf,
      obtain ‚ü®Œπ, hŒπ, C, hC, U, hU, h‚ÇÅ, h‚ÇÇ‚ü© := Inter_compact_open_gen_subset_uniform_gen _ _ f hK hV,
      haveI := hŒπ,
      refine ‚ü®‚ãÇ i, continuous_map.compact_open.gen (C i) (U i), h‚ÇÇ.trans hXf, _, h‚ÇÅ‚ü©,
      apply is_open_Inter,
      intros i,
      exact continuous_map.is_open_gen (hC i) (hU i), },
    { rintros g Y ‚ü®-, ‚ü®K, hK, V, hV, rfl‚ü©, hY‚ü©,
      exact hY (mem_uniform_gen_self K V g hV), },
    { rintros g Y ‚ü®-, ‚ü®K, hK, V, hV, rfl‚ü©, hY‚ü©,
      obtain ‚ü®V', hV', hV'', hV'''‚ü© := uniform_gen_nhd_basis K V g hV,
      refine ‚ü®uniform_gen K V' g, filter_basis.mem_filter_of_mem _ ‚ü®K, hK, V', hV', rfl‚ü©, _, _‚ü©,
      { exact set.subset.trans (uniform_gen_mono K V g V' hV'') hY, },
      { intros g' hg',
        rw filter_basis.mem_filter_iff,
        refine ‚ü®uniform_gen K V' g', ‚ü®K, hK, V', hV', rfl‚ü©, _‚ü©,
        refine set.subset.trans _ hY,
        apply hV''',
        exact hg', }, }, },
end

instance : uniform_space C(Œ±, Œ≤) :=
{ uniformity := ‚®Ö KV ‚àà { KV : set Œ± √ó set (Œ≤ √ó Œ≤) | is_compact KV.1 ‚àß KV.2 ‚àà ùì§ Œ≤ },
                ùìü { fg : C(Œ±, Œ≤) √ó C(Œ±, Œ≤) | ‚àÄ (x : Œ±), x ‚àà KV.1 ‚Üí (fg.1 x, fg.2 x) ‚àà KV.2 },
  refl :=
    begin
      simp only [and_imp, filter.le_principal_iff, prod.forall, filter.mem_principal, mem_set_of_eq,
        le_infi_iff, id_rel_subset],
      intros K V hK hV f x hx,
      exact refl_mem_uniformity hV,
    end,
  symm := sorry, -- trivial
  comp := sorry, -- trivial
  is_open_uniformity :=
    begin
      simp only [‚Üê compact_open_eq_uniform],
      intros X,
      apply forall_congr,
      intros f,
      apply forall_congr,
      intros hf,
      rw mem_compact_convergence_filter f X,
      have h : { KV : set Œ± √ó set (Œ≤ √ó Œ≤) | is_compact KV.1 ‚àß KV.2 ‚àà ùì§ Œ≤ }.nonempty,
      { exact ‚ü®‚ü®‚àÖ, univ‚ü©, is_compact_empty, filter.univ_mem‚ü©, },
      rw (filter.has_basis_binfi_principal _ h).mem_iff,
      { simp only [exists_prop, prod.forall, set_of_subset_set_of, mem_set_of_eq, prod.exists],
        split,
        { rintros ‚ü®K, V, hK, hV, hX‚ü©,
          refine ‚ü®K, V, ‚ü®hK, hV‚ü©, Œª g‚ÇÅ g‚ÇÇ hg hfg, hX _‚ü©,
          exact hfg ‚ñ∏ hg, },
        { rintros ‚ü®K, V, ‚ü®hK, hV‚ü©, hX‚ü©,
          exact ‚ü®K, V, hK, hV, Œª g hg, hX f g hg rfl‚ü©, }, },
      { rintros ‚ü®K‚ÇÅ, V‚ÇÅ‚ü© ‚ü®hK‚ÇÅ : is_compact K‚ÇÅ, hV‚ÇÅ : V‚ÇÅ ‚àà ùì§ Œ≤‚ü©
                ‚ü®K‚ÇÇ, V‚ÇÇ‚ü© ‚ü®hK‚ÇÇ : is_compact K‚ÇÇ, hV‚ÇÇ : V‚ÇÇ ‚àà ùì§ Œ≤‚ü©,
        refine ‚ü®‚ü®K‚ÇÅ ‚à™ K‚ÇÇ, V‚ÇÅ ‚à© V‚ÇÇ‚ü©, ‚ü®hK‚ÇÅ.union hK‚ÇÇ, filter.inter_mem hV‚ÇÅ hV‚ÇÇ‚ü©, _‚ü©,
        simp only [le_eq_subset, prod.forall, mem_inter_eq, mem_union_eq, set_of_subset_set_of,
          ge_iff_le, order.preimage],
        exact ‚ü®Œª f g h x hx, (h x (or.inl hx)).1, Œª f g h x hx, (h x (or.inr hx)).2‚ü©, },
    end }
